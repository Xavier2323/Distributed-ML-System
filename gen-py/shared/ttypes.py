#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TaskStatus(object):
    ACCEPTED = 1
    REJECTED = 2

    _VALUES_TO_NAMES = {
        1: "ACCEPTED",
        2: "REJECTED",
    }

    _NAMES_TO_VALUES = {
        "ACCEPTED": 1,
        "REJECTED": 2,
    }


class MLModel(object):
    """
    Attributes:
     - V
     - W

    """


    def __init__(self, V=None, W=None,):
        self.V = V
        self.W = W

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.V = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = []
                        (_etype9, _size6) = iprot.readListBegin()
                        for _i10 in range(_size6):
                            _elem11 = iprot.readDouble()
                            _elem5.append(_elem11)
                        iprot.readListEnd()
                        self.V.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.W = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = []
                        (_etype21, _size18) = iprot.readListBegin()
                        for _i22 in range(_size18):
                            _elem23 = iprot.readDouble()
                            _elem17.append(_elem23)
                        iprot.readListEnd()
                        self.W.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MLModel')
        if self.V is not None:
            oprot.writeFieldBegin('V', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.V))
            for iter24 in self.V:
                oprot.writeListBegin(TType.DOUBLE, len(iter24))
                for iter25 in iter24:
                    oprot.writeDouble(iter25)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.W is not None:
            oprot.writeFieldBegin('W', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.W))
            for iter26 in self.W:
                oprot.writeListBegin(TType.DOUBLE, len(iter26))
                for iter27 in iter26:
                    oprot.writeDouble(iter27)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MLGradient(object):
    """
    Attributes:
     - dV
     - dW

    """


    def __init__(self, dV=None, dW=None,):
        self.dV = dV
        self.dW = dW

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.dV = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = []
                        (_etype37, _size34) = iprot.readListBegin()
                        for _i38 in range(_size34):
                            _elem39 = iprot.readDouble()
                            _elem33.append(_elem39)
                        iprot.readListEnd()
                        self.dV.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.dW = []
                    (_etype43, _size40) = iprot.readListBegin()
                    for _i44 in range(_size40):
                        _elem45 = []
                        (_etype49, _size46) = iprot.readListBegin()
                        for _i50 in range(_size46):
                            _elem51 = iprot.readDouble()
                            _elem45.append(_elem51)
                        iprot.readListEnd()
                        self.dW.append(_elem45)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MLGradient')
        if self.dV is not None:
            oprot.writeFieldBegin('dV', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.dV))
            for iter52 in self.dV:
                oprot.writeListBegin(TType.DOUBLE, len(iter52))
                for iter53 in iter52:
                    oprot.writeDouble(iter53)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dW is not None:
            oprot.writeFieldBegin('dW', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.dW))
            for iter54 in self.dW:
                oprot.writeListBegin(TType.DOUBLE, len(iter54))
                for iter55 in iter54:
                    oprot.writeDouble(iter55)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainingResult(object):
    """
    Attributes:
     - gradient
     - error_rate

    """


    def __init__(self, gradient=None, error_rate=None,):
        self.gradient = gradient
        self.error_rate = error_rate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.gradient = MLGradient()
                    self.gradient.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.error_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainingResult')
        if self.gradient is not None:
            oprot.writeFieldBegin('gradient', TType.STRUCT, 1)
            self.gradient.write(oprot)
            oprot.writeFieldEnd()
        if self.error_rate is not None:
            oprot.writeFieldBegin('error_rate', TType.DOUBLE, 2)
            oprot.writeDouble(self.error_rate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MLModel)
MLModel.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'V', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 1
    (2, TType.LIST, 'W', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
)
all_structs.append(MLGradient)
MLGradient.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'dV', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 1
    (2, TType.LIST, 'dW', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
)
all_structs.append(TrainingResult)
TrainingResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'gradient', [MLGradient, None], None, ),  # 1
    (2, TType.DOUBLE, 'error_rate', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
